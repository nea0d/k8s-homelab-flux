---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 15m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 39.12.1
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 15m
  install:
    createNamespace: true
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 5
  values:
    alertmanager:
      config:
        global:
          slack_api_url: "${SECRET_ALERT_MANAGER_MATTERMOST_WEBHOOK}"
          resolve_timeout: 5m
        receivers:
          - name: 'null'
          - name: 'mattermost'
            slack_configs:
              - channel: '#prometheus'
                icon_url: https://avatars3.githubusercontent.com/u/3380462
                username: 'Prometheus'
                send_resolved: true
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }} {{ else if ne .CommonAnnotations.message ""}}{{ .CommonAnnotations.message }} {{ else if ne .CommonAnnotations.description ""}}{{ .CommonAnnotations.description }} {{ else }}{{ .CommonLabels.alertname }}{{ end }}
                text: >-
                  {{ range .Alerts -}}
                    *Alert:* {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
                  {{ if ne .Annotations.summary ""}}*Summary:* {{ .Annotations.summary }} {{ else if ne .Annotations.message ""}}*Message:* {{ .Annotations.message }} {{ else if ne .Annotations.description ""}}*Description:* {{ .Annotations.description }}{{ end }}
                  *Details:*
                    {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                    {{ end }}
                  {{ end }}
        route:
          group_by: ['alertname', 'job']
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: 'null'
          routes:
            - receiver: 'null'
              match:
                alertname: Watchdog
            - receiver: 'mattermost'
              match_re:
                severity: critical|warning|error
              continue: true
        inhibit_rules:
          - source_match:
              severity: 'critical'
            target_match:
              severity: 'warning'
            equal: ['alertname', 'namespace']
      ingress:
        enabled: true
        ingressClassName: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          hajimari.io/enable: "true"
          hajimari.io/icon: "alert-box"
          hajimari.io/appName: "Alert-Manager"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: "networking-internal-only@kubernetescrd"
        hosts:
          - &host "alert-manager.${SECRET_PUBLIC_DOMAIN}"
        tls:
          - hosts:
              - *host
            secretName: "alert-manager-tls"
      alertmanagerSpec:
        replicas: 1
        podAntiAffinity: hard
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: "longhorn-ssd"
              resources:
                requests:
                  storage: 250Mi
    nodeExporter:
      serviceMonitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node
    kube-state-metrics:
      metricLabelsAllowlist:
        - "persistentvolumeclaims=[*]"
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: true
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    kubeApiServer:
      enabled: true
    # FIXME : dynamic master nodes IP via ansible vars
    kubeControllerManager:
      enabled: true
      endpoints:
        - ${CLUSTER_HOST_MASTER_ADDR_1}
        - ${CLUSTER_HOST_MASTER_ADDR_2}
        - ${CLUSTER_HOST_MASTER_ADDR_3}
    kubeScheduler:
      enabled: true
      endpoints:
        - ${CLUSTER_HOST_MASTER_ADDR_1}
        - ${CLUSTER_HOST_MASTER_ADDR_2}
        - ${CLUSTER_HOST_MASTER_ADDR_3}
    kubeProxy:
      enabled: true
      endpoints:
        - ${CLUSTER_HOST_MASTER_ADDR_1}
        - ${CLUSTER_HOST_MASTER_ADDR_2}
        - ${CLUSTER_HOST_MASTER_ADDR_3}
    kubeEtcd:
      enabled: true
      endpoints:
        - ${CLUSTER_HOST_MASTER_ADDR_1}
        - ${CLUSTER_HOST_MASTER_ADDR_2}
        - ${CLUSTER_HOST_MASTER_ADDR_3}
      service:
        enabled: true
        port: 2381
        targetPort: 2381
    prometheus:
      ingress:
        enabled: true
        ingressClassName: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          hajimari.io/enable: "true"
          hajimari.io/icon: "monitor-eye"
          hajimari.io/appName: "Prometheus"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: "networking-internal-only@kubernetescrd"
        hosts:
          - &host "prometheus.${SECRET_PUBLIC_DOMAIN}"
        tls:
          - hosts:
              - *host
            secretName: "prometheus-tls"
      thanosService:
        enabled: true
      thanosServiceMonitor:
        enabled: true
      thanosIngress:
        ingress:
          enabled: true
          ingressClassName: "traefik"
          annotations:
            cert-manager.io/cluster-issuer: "letsencrypt-production"
            traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
            traefik.ingress.kubernetes.io/router.middlewares: "networking-internal-only@kubernetescrd"
          hosts:
            - &host "thanos-sidecar.${SECRET_PUBLIC_DOMAIN}"
          tls:
            - hosts:
                - *host
              secretName: "thanos-sidecar-tls"
      resources:
        requests:
          cpu: 10m
          memory: 2Gi
        limits:
          cpu: 500m
          memory: 4Gi
      prometheusSpec:
        replicas: 1
        podAntiAffinity: hard
        replicaExternalLabelName: __replica__
        externalLabels:
        cluster: "${CLUSTER_NAME}"
        retentionSize: "5GB"
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 6h
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: "longhorn-ssd"
              resources:
                requests:
                  storage: 10Gi
        thanos:
          image: quay.io/thanos/thanos:v0.28.0
          # renovate: datasource=docker depName=quay.io/thanos/thanos
          version: "v0.28.0"
          # objectStorageConfig:
          #   name: thanos-objstore-secret
          #   key: objstore.yml
        additionalScrapeConfigs:
          - job_name: "coredns"
            scrape_interval: 1m
            scrape_timeout: 10s
            honor_timestamps: true
            static_configs:
              - targets:
                  - "${METALLB_K8S_GATEWAY_ADDR}:9153"
          # - job_name: 'node-exporter'
          #   scrape_interval: 1m
          #   scrape_timeout: 10s
          #   honor_timestamps: true
          #   static_configs:
          #   - targets:
          #     # # opnsense
          #     # - 10.75.1.1:9100
          #     # franxx nas
          #     - 10.75.30.15:9100
          # - job_name: 'minio-job'
          #   scrape_interval: 1m
          #   scrape_timeout: 10s
          #   honor_timestamps: true
          #   metrics_path: /minio/v2/metrics/cluster
          #   static_configs:
          #   - targets:
          #     - 10.75.30.15:9000
