---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: &app qbittorrent
  namespace: nzb
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://k8s-at-home.com/charts/
      chart: qbittorrent
      version: 13.1.0
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home-charts
        namespace: flux-system
      interval: 5m
  install:
    createNamespace: true
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 5
  values:
    global:
      nameOverride: *app
    image:
      repository: ghcr.io/k8s-at-home/qbittorrent
      tag: v4.3.9
    env:
      TZ: "${TIMEZONE}"
    hostname: *app
    podLabels:
      setGateway: "true"
    service:
      main:
        ports:
          http:
            port: 8080
      bittorrent:
        enabled: true
        type: ClusterIP
        ports:
          bittorrent:
            enabled: true
            port: 16881
            protocol: TCP
            targetPort: 16881
    ingress:
      main:
        enabled: true
        ingressClassName: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: "networking-internal-only@kubernetescrd"
          hajimari.io/enable: "true"
          hajimari.io/icon: "cloud-download"
          hajimari.io/group: "nzb"
        hosts:
          - host: &host "{{ .Release.Name }}.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - *host
            secretName: qbittorrent-tls
      api:
        enabled: true
        ingressClassName: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: "networking-internal-only@kubernetescrd"
        hosts:
          - host: *host
            paths:
              - path: /api
                pathType: Prefix
        tls:
          - hosts:
              - *host
            secretName: qbittorrent-api-tls
    persistence:
      config:
        enabled: true
        existingClaim: qbittorrent-config-v1
      media:
        enabled: true
        existingClaim: nfs-nas-media-pvc
    podSecurityContext:
      runAsUser: 568
      runAsGroup: 568
      fsGroup: 568
      fsGroupChangePolicy: "OnRootMismatch"
    #TODO : add ressources limits
    # resources:
    #   requests:
    #     cpu: 500m
    #     memory: 1000Mi
    #   limits:
    #     memory: 6000Mi
    addons:

      # -- The common chart supports adding a VPN add-on. It can be configured under this key.
      # For more info, check out [our docs](http://docs.k8s-at-home.com/our-helm-charts/common-library-add-ons/#wireguard-vpn)
      # @default -- See values.yaml
      vpn:
        # -- Enable running a VPN in the pod to route traffic through a VPN
        enabled: true

        # -- Specify the VPN type. Valid options are openvpn or wireguard
        type: openvpn

        # If the podSecurityContext is set to run as a different user, make sure to run the OpenVPN container as root.
        # This is required for it to be able to read certain configuration files.
        securityContext:
          runAsGroup: 0
          runAsUser: 0

        # -- OpenVPN specific configuration
        # @default -- See below
        openvpn:

          # -- Optionally specify an existing secret that contains the credentials.
          # Credentials should be stored under the `VPN_AUTH` key
          authSecret: vpn-auth-secret

        # -- All variables specified here will be added to the vpn sidecar container
        # See the documentation of the VPN image for all config values
        env:
          TZ: Europe/Paris
          WAIT_FOR_VPN: "true"
          FIREWALL: "on"
          ROUTE_1: "10.0.0.0/8"
          VPNPORT_1: "16881"
          OTHER_ARGS: "--mute-replay-warnings"

        # -- Reference an existing secret that contains the VPN configuration file
        # The chart expects it to be present under the `vpnConfigfile` key.
        configFileSecret: vpn-config-secret

        livenessProbe:
          exec:
            # In the example bellow the VPN output is outside FRANCE - change appropiatly
            command:
              - sh
              - -c
              - if [ $(wget -q -O- https://ipinfo.io/country) != 'FR' ]; then exit 0; else exit $?; fi
          # Initial delay before performing the probe
          initialDelaySeconds: 30
          # How often to perform the probe
          periodSeconds: 60
          # Timeout after which the probe times out
          timeoutSeconds: 5
          # Number of retry before restarting the pod
          failureThreshold: 3

        networkPolicy:
          enabled: true

          egress:
            - to:
                - ipBlock:
                    cidr: 0.0.0.0/0
              ports:
              # VPN traffic port - change if your provider uses a different port
                - port: 1194
                  protocol: UDP
              #- port: 16881
              #  protocol: TCP
              #- port: 16881
              #  protocol: UDP
            - to:
              # Allow traffic within K8S - change if your K8S cluster uses a different CIDR
                - ipBlock:
                    cidr: 10.0.0.0/8
